name: 🚀 CI/CD Quiz Multijoueur

# Se déclenche au push sur main et develop
# Se déclenche lorsque d'une pr est crée sur la branche main
on:
  push:
    branches: [ main, develop ] 
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      deploy_environment:
        description: 'Environment to deploy'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

# Utile pour garder ne pas utilser les dernière versions qui nécessite peut etre de changer la pipeline
env:
  TF_VERSION: '1.6.0'
  ANSIBLE_VERSION: '8.0.0'
  NODE_VERSION: '18'

jobs: 
  terraform-security:
    name: 🔒 Sécurité Terraform
    runs-on: ubuntu-latest
    steps:
      # Met le code dans la vm
      - name: Checkout code
        uses: actions/checkout@v4
      # Installe terraform sur la vm avec la version
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      # Corrige si erreur de formatage
      - name: Terraform format check
        run: |
          cd infrastructure/terraform
          terraform fmt -check -recursive

      # Télécharge et instale TFlint
      - name: Install TFLint
        run: |
          curl -s https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh | bash

      # Lance TFlint, qui vérifie la logique de la terraform, s'il peut s'executer correctement
      # Le paramètre --minimun-failure-severity=error permet de ne pas casser la pipeline sur des warning, que sur des erreurs
      - name: Run TFLint
        run: |
          cd infrastructure/terraform
          tflint --init
          tflint --format compact --minimum-failure-severity=error
      
      - name: Install Checkov
        run: |
          pip3 install checkov
      # Lance Checkov qui vérfie l'aspect sécuritaire 
      - name: Run Checkov
        run: |
          cd infrastructure/terraform
          checkov -d . --framework terraform --output cli --config-file .checkov.yml
  
  ansible-validation:
    name: 🎭 Validation Ansible
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-ansible-validation-${{ env.ANSIBLE_VERSION }}
          restore-keys: |
            ${{ runner.os }}-pip-ansible-validation-
            ${{ runner.os }}-pip-

      - name: Install Ansible
        run: |
          pip3 install ansible==${{ env.ANSIBLE_VERSION }}
          pip3 install ansible-lint

      - name: Create dummy hosts.ini for syntax check
        run: |
          mkdir -p infrastructure/ansible/inventory
          echo "[web_servers]" > infrastructure/ansible/inventory/hosts.ini
          echo "127.0.0.1 ansible_user=ubuntu ansible_ssh_private_key_file=~/.ssh/key.pem" >> infrastructure/ansible/inventory/hosts.ini
          echo "[api_servers]" >> infrastructure/ansible/inventory/hosts.ini
          echo "127.0.0.1 ansible_user=ubuntu ansible_ssh_private_key_file=~/.ssh/key.pem" >> infrastructure/ansible/inventory/hosts.ini
      
      - name: Ansible syntax check
        run: |
          cd infrastructure/ansible
          ansible-playbook --syntax-check playbook.yml -i inventory/hosts.ini
      # Vérifie les bonnes pratique
      - name: Ansible lint
        run: |
          cd infrastructure/ansible
          ansible-lint playbook.yml

  build:
    name: 📦 Package
    runs-on: ubuntu-latest
    needs: [terraform-security, ansible-validation]
    # Resttriction pour créer un package de la version que sur la version déployer sur main
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create deployment package
        run: |
          echo "📦 Création du package de déploiement"
          
          # Créer l'archive de déploiement
          mkdir -p deploy-package
          
          # Backend
          cp -r backend deploy-package/
          
          # Frontend  
          cp -r frontend deploy-package/
          
          # Infrastructure
          cp -r infrastructure deploy-package/
          
          # Créer l'archive
          tar -czf quiz-app-$(date +%Y%m%d-%H%M%S).tar.gz deploy-package/

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: quiz-app-build
          path: quiz-app-*.tar.gz
          retention-days: 30

  check-infrastructure:
    name: 🔍 Vérification Infrastructure via AWS
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    outputs:
      infrastructure_exists: ${{ steps.check_aws.outputs.infrastructure_exists }}
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-3

      - name: Check Infrastructure via AWS
        id: check_aws
        run: |
          echo "🔍 Vérification de l'infrastructure via AWS..."
          
          WEB_COUNT=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=quiz-multijoueur-web-server" \
                      "Name=instance-state-name,Values=running" \
            --query 'length(Reservations[*].Instances[*])' \
            --output text 2>/dev/null || echo "0")
          
          API_COUNT=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=quiz-multijoueur-api-server" \
                      "Name=instance-state-name,Values=running" \
            --query 'length(Reservations[*].Instances[*])' \
            --output text 2>/dev/null || echo "0")
          
          echo "📊 Instances trouvées: WEB=$WEB_COUNT, API=$API_COUNT"
          
          if [ "$WEB_COUNT" -gt 0 ] && [ "$API_COUNT" -gt 0 ]; then
            echo "infrastructure_exists=true" >> $GITHUB_OUTPUT
            echo "✅ Infrastructure détectée - Déploiement Ansible activé"
          else
            echo "infrastructure_exists=false" >> $GITHUB_OUTPUT
            echo "❌ Infrastructure manquante - Déploiement manuel requis"
            echo "🏗️ Exécutez: make init && make apply"
          fi

  deploy-application:
    name: 🚀 Déploiement Application avec Ansible
    runs-on: ubuntu-latest
    needs: [check-infrastructure]
    if: needs.check-infrastructure.outputs.infrastructure_exists == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-ansible-${{ env.ANSIBLE_VERSION }}
          restore-keys: |
            ${{ runner.os }}-pip-ansible-
            ${{ runner.os }}-pip-
      
      - name: Install Ansible
        run: |
          pip3 install ansible==${{ env.ANSIBLE_VERSION }}
          
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-3

      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/quiz-app-key.pem
          chmod 600 ~/.ssh/quiz-app-key.pem
          
          # Configure SSH to avoid host key verification issues
          cat >> ~/.ssh/config << EOF
          Host *
              StrictHostKeyChecking no
              UserKnownHostsFile /dev/null
              IdentitiesOnly yes
              LogLevel QUIET
          EOF
          chmod 600 ~/.ssh/config
      
      - name: Check infrastructure and Generate hosts.ini
        run: |
          echo "🔍 Vérification de l'infrastructure existante via AWS..."
          
          # Check for existing instances
          WEB_IP=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=quiz-multijoueur-web-server" \
                      "Name=instance-state-name,Values=running" \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --output text 2>/dev/null | tr -d '\n' || echo "")
          
          API_IP=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=quiz-multijoueur-api-server" \
                      "Name=instance-state-name,Values=running" \
            --query 'Reservations[*].Instances[*].PrivateIpAddress' \
            --output text 2>/dev/null | tr -d '\n' || echo "")
          
          if [ -n "$WEB_IP" ] && [ -n "$API_IP" ]; then
            echo "✅ Infrastructure trouvée: WEB=$WEB_IP, API=$API_IP"
            
            # Generate hosts.ini manually
            mkdir -p infrastructure/ansible/inventory
            cat > infrastructure/ansible/inventory/hosts.ini << EOF
          [web_servers]
          $WEB_IP ansible_user=ubuntu ansible_ssh_private_key_file=~/.ssh/quiz-app-key.pem
          [api_servers]
          $API_IP ansible_user=ubuntu ansible_ssh_private_key_file=~/.ssh/quiz-app-key.pem ansible_ssh_common_args='-o ProxyCommand="ssh -W %h:%p -i ~/.ssh/quiz-app-key.pem ubuntu@$WEB_IP"'
          EOF
            
            echo "📋 Contenu du fichier hosts.ini généré:"
            cat infrastructure/ansible/inventory/hosts.ini
          else
            echo "❌ Infrastructure non trouvée. WEB: '$WEB_IP', API: '$API_IP'"
            echo "🏗️ Infrastructure doit être déployée manuellement d'abord:"
            echo "   make init && make apply"
            exit 1
          fi
      
      - name: Deploy Application with Ansible
        run: |
          echo "🚀 Déploiement de l'application avec Ansible..."
          
          # Test SSH connectivity first
          echo "🔗 Test de connectivité SSH..."
          WEB_IP=$(head -n 2 infrastructure/ansible/inventory/hosts.ini | tail -n 1 | cut -d' ' -f1)
          
          echo "Test connexion au serveur web ($WEB_IP)..."
          ssh -i ~/.ssh/quiz-app-key.pem -o ConnectTimeout=5 -o ConnectionAttempts=2 ubuntu@$WEB_IP "echo 'SSH OK'" || echo "Connexion web échouée"
          
          # Run Ansible with optimized settings (no verbose to speed up)
          ANSIBLE_HOST_KEY_CHECKING=False \
          ANSIBLE_SSH_ARGS='-o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -o ControlMaster=auto -o ControlPersist=60s' \
          ANSIBLE_PIPELINING=True \
          ansible-playbook -i infrastructure/ansible/inventory/hosts.ini infrastructure/ansible/playbook.yml --forks=10
          
          echo "✅ Application déployée avec succès"