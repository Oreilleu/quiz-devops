name: üöÄ CI/CD Quiz Multijoueur

# Se d√©clenche au push sur main et develop
# Se d√©clenche lorsque d'une pr est cr√©e sur la branche main
on:
  push:
    branches: [ main, develop ] 
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      deploy_environment:
        description: 'Environment to deploy'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

# Utile pour garder ne pas utilser les derni√®re versions qui n√©cessite peut etre de changer la pipeline
env:
  TF_VERSION: '1.6.0'
  ANSIBLE_VERSION: '8.0.0'
  NODE_VERSION: '18'

jobs: 
  terraform-security:
    name: üîí S√©curit√© Terraform
    runs-on: ubuntu-latest
    steps:
      # Met le code dans la vm
      - name: Checkout code
        uses: actions/checkout@v4
      # Installe terraform sur la vm avec la version
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      # Corrige si erreur de formatage
      - name: Terraform format check
        run: |
          cd infrastructure/terraform
          terraform fmt -check -recursive

      # T√©l√©charge et instale TFlint
      - name: Install TFLint
        run: |
          curl -s https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh | bash

      # Lance TFlint, qui v√©rifie la logique de la terraform, s'il peut s'executer correctement
      # Le param√®tre --minimun-failure-severity=error permet de ne pas casser la pipeline sur des warning, que sur des erreurs
      - name: Run TFLint
        run: |
          cd infrastructure/terraform
          tflint --init
          tflint --format compact --minimum-failure-severity=error
      
      - name: Install Checkov
        run: |
          pip3 install checkov
      # Lance Checkov qui v√©rfie l'aspect s√©curitaire 
      - name: Run Checkov
        run: |
          cd infrastructure/terraform
          checkov -d . --framework terraform --output cli --config-file .checkov.yml
  
  ansible-validation:
    name: üé≠ Validation Ansible
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Ansible
        run: |
          pip3 install ansible==${{ env.ANSIBLE_VERSION }}
          pip3 install ansible-lint

      - name: Ansible syntax check
        run: |
          cd infrastructure/ansible
          ansible-playbook --syntax-check playbook.yml -i inventory/hosts.ini
      # V√©rifie les bonnes pratique
      - name: Ansible lint
        run: |
          cd infrastructure/ansible
          ansible-lint playbook.yml

  build:
    name: üì¶ Package
    runs-on: ubuntu-latest
    needs: [terraform-security, ansible-validation]
    # Resttriction pour cr√©er un package de la version que sur la version d√©ployer sur main
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create deployment package
        run: |
          echo "üì¶ Cr√©ation du package de d√©ploiement"
          
          # Cr√©er l'archive de d√©ploiement
          mkdir -p deploy-package
          
          # Backend
          cp -r backend deploy-package/
          
          # Frontend  
          cp -r frontend deploy-package/
          
          # Infrastructure
          cp -r infrastructure deploy-package/
          
          # Cr√©er l'archive
          tar -czf quiz-app-$(date +%Y%m%d-%H%M%S).tar.gz deploy-package/

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: quiz-app-build
          path: quiz-app-*.tar.gz
          retention-days: 30

  check-terraform-changes:
    name: üîç V√©rification Changements Terraform
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    outputs:
      has_changes: ${{ steps.plan.outputs.has_changes }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-3

      - name: Terraform Init
        run: |
          cd infrastructure/terraform
          terraform init

      - name: Terraform Plan et D√©tection Changements
        id: plan
        run: |
          cd infrastructure/terraform
          terraform plan -detailed-exitcode -out=tfplan
          exit_code=$?
          if [ $exit_code -eq 0 ]; then
            echo "has_changes=false" >> $GITHUB_OUTPUT
            echo "‚úÖ Aucun changement infrastructure d√©tect√©"
          elif [ $exit_code -eq 2 ]; then
            echo "has_changes=true" >> $GITHUB_OUTPUT
            echo "üîÑ Changements infrastructure d√©tect√©s"
          else
            echo "‚ùå Erreur lors du plan Terraform"
            exit $exit_code
          fi

      - name: Upload Terraform Plan
        if: steps.plan.outputs.has_changes == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan-${{ github.run_id }}
          path: infrastructure/terraform/tfplan

  deploy-infrastructure:
    name: üèóÔ∏è D√©ploiement Infrastructure (APPROBATION REQUISE)
    runs-on: ubuntu-latest
    needs: [check-terraform-changes]
    if: needs.check-terraform-changes.outputs.has_changes == 'true'
    environment: 
      name: infrastructure-approval
      url: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-3

      - name: Download Terraform Plan
        uses: actions/download-artifact@v4
        with:
          name: terraform-plan-${{ github.run_id }}
          path: infrastructure/terraform/

      - name: Terraform Init
        run: |
          cd infrastructure/terraform
          terraform init

      - name: Terraform Apply
        run: |
          cd infrastructure/terraform
          terraform apply -auto-approve tfplan
          echo "‚úÖ Infrastructure d√©ploy√©e avec succ√®s"

  deploy-application:
    name: üöÄ D√©ploiement Application
    runs-on: ubuntu-latest
    needs: [check-terraform-changes, deploy-infrastructure]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Install Ansible
        run: |
          pip3 install ansible==${{ env.ANSIBLE_VERSION }}
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-3
      - name: Get Infrastructure Outputs
        if: needs.check-terraform-changes.outputs.has_changes == 'true'
        run: |
          cd infrastructure/terraform
          terraform init
          WEB_IP=$(terraform output -raw web_server_public_ip)
          API_IP=$(terraform output -raw api_server_public_ip)
          echo "WEB_SERVER_IP=$WEB_IP" >> $GITHUB_ENV
          echo "API_SERVER_IP=$API_IP" >> $GITHUB_ENV
      - name: Update Ansible Inventory
        if: needs.check-terraform-changes.outputs.has_changes == 'true'  # ‚Üê AJOUTER
        run: |
          cd infrastructure/ansible
          sed -i "s/WEB_SERVER_IP/$WEB_SERVER_IP/g" inventory/hosts.ini
          sed -i "s/API_SERVER_IP/$API_SERVER_IP/g" inventory/hosts.ini
      - name: Setup SSH key
        if: needs.check-terraform-changes.outputs.has_changes == 'true'  # ‚Üê AJOUTER
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/quiz-app-key.pem
          chmod 600 ~/.ssh/quiz-app-key.pem
          ssh-keyscan -H "$WEB_SERVER_IP" >> ~/.ssh/known_hosts  # ‚Üê CORRIGER
          ssh-keyscan -H "$API_SERVER_IP" >> ~/.ssh/known_hosts  # ‚Üê CORRIGER
      - name: Deploy Application with Ansible
        run: |
          cd infrastructure/ansible
          echo "üöÄ D√©ploiement de l'application en cours..."
          ANSIBLE_HOST_KEY_CHECKING=False ansible-playbook -i inventory/hosts.ini playbook.yml -v
          echo "‚úÖ Application d√©ploy√©e avec succ√®s"