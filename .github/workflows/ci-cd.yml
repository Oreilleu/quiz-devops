name: 🚀 CI/CD Quiz Multijoueur

# Se déclenche au push sur main et develop
# Se déclenche lorsque d'une pr est crée sur la branche main
on:
  push:
    branches: [ main, develop ] 
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      deploy_environment:
        description: 'Environment to deploy'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

# Utile pour garder ne pas utilser les dernière versions qui nécessite peut etre de changer la pipeline
env:
  TF_VERSION: '1.6.0'
  ANSIBLE_VERSION: '8.0.0'
  NODE_VERSION: '18'

jobs: 
  terraform-security:
    name: 🔒 Sécurité Terraform
    runs-on: ubuntu-latest
    steps:
      # Met le code dans la vm
      - name: Checkout code
        uses: actions/checkout@v4
      # Installe terraform sur la vm avec la version
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      # Corrige si erreur de formatage
      - name: Terraform format check
        run: |
          cd infrastructure/terraform
          terraform fmt -check -recursive

      # Télécharge et instale TFlint
      - name: Install TFLint
        run: |
          curl -s https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh | bash

      # Lance TFlint, qui vérifie la logique de la terraform, s'il peut s'executer correctement
      # Le paramètre --minimun-failure-severity=error permet de ne pas casser la pipeline sur des warning, que sur des erreurs
      - name: Run TFLint
        run: |
          cd infrastructure/terraform
          tflint --init
          tflint --format compact --minimum-failure-severity=error
      
      - name: Install Checkov
        run: |
          pip3 install checkov
      # Lance Checkov qui vérfie l'aspect sécuritaire 
      - name: Run Checkov
        run: |
          cd infrastructure/terraform
          checkov -d . --framework terraform --output cli --config-file .checkov.yml
  
  ansible-validation:
    name: 🎭 Validation Ansible
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Ansible
        run: |
          pip3 install ansible==${{ env.ANSIBLE_VERSION }}
          pip3 install ansible-lint

      - name: Create dummy hosts.ini for syntax check
        run: |
          mkdir -p infrastructure/ansible/inventory
          echo "[web_servers]" > infrastructure/ansible/inventory/hosts.ini
          echo "127.0.0.1 ansible_user=ubuntu ansible_ssh_private_key_file=~/.ssh/key.pem" >> infrastructure/ansible/inventory/hosts.ini
          echo "[api_servers]" >> infrastructure/ansible/inventory/hosts.ini
          echo "127.0.0.1 ansible_user=ubuntu ansible_ssh_private_key_file=~/.ssh/key.pem" >> infrastructure/ansible/inventory/hosts.ini
      
      - name: Ansible syntax check
        run: |
          cd infrastructure/ansible
          ansible-playbook --syntax-check playbook.yml -i inventory/hosts.ini
      # Vérifie les bonnes pratique
      - name: Ansible lint
        run: |
          cd infrastructure/ansible
          ansible-lint playbook.yml

  build:
    name: 📦 Package
    runs-on: ubuntu-latest
    needs: [terraform-security, ansible-validation]
    # Resttriction pour créer un package de la version que sur la version déployer sur main
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create deployment package
        run: |
          echo "📦 Création du package de déploiement"
          
          # Créer l'archive de déploiement
          mkdir -p deploy-package
          
          # Backend
          cp -r backend deploy-package/
          
          # Frontend  
          cp -r frontend deploy-package/
          
          # Infrastructure
          cp -r infrastructure deploy-package/
          
          # Créer l'archive
          tar -czf quiz-app-$(date +%Y%m%d-%H%M%S).tar.gz deploy-package/

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: quiz-app-build
          path: quiz-app-*.tar.gz
          retention-days: 30

  check-terraform-changes:
    name: 🔍 Vérification Changements Terraform
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    outputs:
      has_changes: ${{ steps.plan.outputs.has_changes }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-3

      - name: Terraform Init
        run: make init

      - name: Terraform Plan et Détection Changements
        id: plan
        run: |
          cd infrastructure/terraform
          terraform plan -detailed-exitcode -out=tfplan
          exit_code=$?
          if [ $exit_code -eq 0 ]; then
            echo "has_changes=false" >> $GITHUB_OUTPUT
            echo "✅ Aucun changement infrastructure détecté - Ansible va être exécuté"
          elif [ $exit_code -eq 2 ]; then
            echo "has_changes=true" >> $GITHUB_OUTPUT
            echo "🔄 Changements infrastructure détectés - Pipeline arrêtée pour approbation manuelle"
            echo "📋 Pour appliquer les changements: exécutez 'make apply' manuellement"
          else
            echo "❌ Erreur lors du plan Terraform"
            exit $exit_code
          fi

      - name: Upload Terraform Plan
        if: steps.plan.outputs.has_changes == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan-${{ github.run_id }}
          path: infrastructure/terraform/tfplan

  infrastructure-changes-detected:
    name: 🛑 Changements Infrastructure Détectés - Action Manuelle Requise
    runs-on: ubuntu-latest
    needs: [check-terraform-changes]
    if: needs.check-terraform-changes.outputs.has_changes == 'true'
    steps:
      - name: Infrastructure Changes Detected
        run: |
          echo "🛑 ATTENTION: Changements d'infrastructure détectés!"
          echo ""
          echo "📋 Actions requises:"
          echo "1. Examinez le plan Terraform dans les artifacts"
          echo "2. Si les changements sont corrects, exécutez manuellement:"
          echo "   - git pull"
          echo "   - make init"
          echo "   - make apply"
          echo ""
          echo "❌ Le pipeline s'arrête ici pour éviter des changements automatiques non désirés"
          echo ""
          echo "ℹ️  Une fois l'infrastructure mise à jour manuellement, la prochaine exécution"
          echo "   du pipeline déploiera automatiquement l'application avec Ansible"
          exit 1

  deploy-application:
    name: 🚀 Déploiement Application avec Ansible
    runs-on: ubuntu-latest
    needs: [check-terraform-changes]
    if: needs.check-terraform-changes.outputs.has_changes == 'false'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Install Ansible
        run: |
          pip3 install ansible==${{ env.ANSIBLE_VERSION }}
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
        
      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/quiz-app-key.pem
          chmod 600 ~/.ssh/quiz-app-key.pem
      
      - name: Generate hosts.ini and Deploy Application
        run: |
          echo "🚀 Déploiement de l'application avec make deploy..."
          make deploy
          echo "✅ Application déployée avec succès"